import { buildIntent } from "../intent/buildIntent";
import {
  type Address,
  type BaseToken,
  FillStructureStr,
  OutcomeAssetStructureStr,
  type UserConfig,
} from "@intents-sdk/utils";
import { buildRefinement } from "../intent/buildRefinement";

/**
 * Refines an existing **Bridge Swap Intent** by building a new intent
 * with optional constraints (e.g., fee, asset structure, validity window)
 * and returning its corresponding refinement payload.
 *
 * This is typically used when you want to update or constrain an intent
 * before sending it to Medusa for execution â€” for example, to add a fee
 * percentage, limit settlement to a specific outcome structure, or set a
 * time validity range.
 *
 * @param config - Partial {@link UserConfig} containing:
 *  - `chainId`: The chain on which the intent will be authored.
 *  - `contract`: Contract address configuration.
 *  - `adapter`: A {@link WalletAdapter} instance for signing and sending transactions.
 *  - `experimental`: Optional experimental flags.
 *  - `medusaURL`: Medusa service endpoint for intent submission.
 *
 * @param author - The address of the intent author (signer).
 * @param sourceToken - The token to bridge from (on the source chain).
 * @param destinationToken - The token to receive on the destination chain.
 * @param amount - The amount of the source token to bridge (in base units, not adjusted for decimals).
 * @param options - Optional refinement parameters:
 *  - `feePercentage` - A percentage fee to apply on the bridged amount.
 *  - `outcomeAssetStructure` - Desired structure of the output asset ({@link OutcomeAssetStructureStr}).
 *  - `validBefore` - **UNIX timestamp** (in seconds) representing the latest time the intent is valid.
 *  - `validAfter` - **UNIX timestamp** (in seconds) representing the earliest time the intent becomes valid.
 *
 * @returns A Promise resolving to the refinement payload generated by {@link buildRefinement},
 * ready to be submitted to Medusa.
 *
 * @example
 * ```ts
 * const refinement = await refineBridgeSwapIntent(
 *   config,
 *   '0xAuthorAddress',
 *   usdcToken,
 *   usdtToken,
 *   BigInt(1_000_000), // 1 USDC in base units
 *   { feePercentage: 0.5, validBefore: String(Math.floor(Date.now() / 1000) + 3600) } // valid for 1 hour
 * );
 * ```
 */
export async function refineBridgeSwapIntent(
  config: Pick<UserConfig, "chainId" | "contract" | "adapter" | "experimental" | "medusaURL">,
  author: Address,
  sourceToken: BaseToken,
  destinationToken: BaseToken,
  amount: bigint,
  options?: {
    feePercentage?: number;
    outcomeAssetStructure?: OutcomeAssetStructureStr;
    validBefore?: string;
    validAfter?: string;
  },
) {
  const intent = buildIntent(config, author, sourceToken, [destinationToken], amount, FillStructureStr.Exact, {
    feePercentage: options?.feePercentage,
    outcomeAssetStructure: options?.outcomeAssetStructure,
    validBefore: options?.validBefore,
    validAfter: options?.validAfter,
  });
  return await buildRefinement(config, intent);
}
